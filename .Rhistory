content <- as.character(
tagList(
tags$h4("Trip ID:", as.integer(selectedTrip$id)),
sprintf(
"Origin: %s, Latitude: %s Longitude: %s",
selectedTrip$origin, selectedTrip$origin_lat, selectedTrip$origin_lon
)
, tags$br(),
sprintf(
"Destination: %s, Latitude: %s Longitude: %s", selectedTrip$destination, selectedTrip$destination_lat, selectedTrip$destination_lon
), tags$br(),
sprintf("Bus line(s): %s", selectedTrip$line), tags$br(),
sprintf("Datetime: %s", selectedTrip$datetime)
)
)
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = lon)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showTripPopup(event$id, event$lat, event$lng)
})
})
}
# --- UI --- #
header <- dashboardHeader(title = "Twin Cities Buses")
body <- dashboardBody(fluidRow(column(
width = 9,
box(
width = NULL, solidHeader = TRUE,
leafletOutput("map", height = 500)
),
box(width = NULL,
uiOutput("numVehiclesTable"))
),
column(
width = 3,
box(
width = NULL, status = "warning",
radioButtons(
"selectedWeekday", "Wochentag",
choices = c(
"Montag" = 1,
"Dienstag" = 2,
"Mittwoch" = 3,
"Donnerstag" = 4,
"Freitag" = 5,
"Samstag" = 6,
"Sonntag" = 0
),
selected = c(1)
),
p(class = "text-muted",
paste("Note: a meaningful note here")),
radioButtons(
"selectedTime", "Uhrzeit",
choices = c(
"8:00 - 12:00" = 0,
"12:00 - 16:00" = 1,
"16:00 - 20:00" = 2,
"20:00 - 24:00" = 3
),
selected = c(0)
),
p(class = "text-muted",
paste("Note: a meaningful note here")),
actionButton("zoomButton", "Zoom to fit buses")
)
)))
ui <- dashboardPage(header,
dashboardSidebar(disable = TRUE),
body)
shinyApp(ui = ui, server = server)
shiny::runApp()
View(locationTrips)
shiny::runApp()
shiny::runApp()
freq_max <- max(locationTrips$freq_r)*2
locationTrips$freq_a <- (locationTrips$freq / freq_max)
shiny::runApp()
shiny::runApp()
shiny::runApp()
## app.R ##
# Install required packages if not exist
if (!require("shiny"))
install.packages("shiny")
if (!require("shinydashboard"))
install.packages("shinydashboard")
if (!require("leaflet"))
install.packages("leaflet")
if (!require("dplyr"))
install.packages("dplyr")
# Libraries
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
# TODO: Auslagern in helper.r
generateColor <- function(tripFreq){
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- 0 + percentFreq * (191 - 0)
resultGreen <- 184 + percentFreq * (0 - 184)
resultBlue <- 229 + percentFreq * (0 - 229)
return(rgb(resultRed, resultGreen, resultBlue))
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
# TODO: Get the shape for all routes.
# --- SERVER --- #
server <- function(input, output, session) {
# Create the map
output$map <- renderLeaflet({
map <- leaflet() %>%
addTiles(urlTemplate = "//{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png") %>%
setView(lng = 9.925, lat = 51.54, zoom = 12)
map
})
tripsInBounds <- reactive({
if (is.null(input$map_bounds))
return(locationTrips[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
subset(
locationTrips,
origin_lat >= latRng[1] & origin_lat <= latRng[2] &
origin_lon >= lngRng[1] & origin_lon <= lngRng[2]
)
})
# Precalculate the breaks we'll need for the two histograms
freqBreaks <-
hist(plot = FALSE, locationTrips$freq, breaks = 30)$breaks
output$histFreq <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(tripsInBounds()) == 0)
return(NULL)
hist(
tripsInBounds()$freq,
breaks = freqBreaks,
main = "Trip count (visible trips)",
xlab = "Trip",
xlim = range(locationTrips$freq),
col = '#00DD00',
border = 'white'
)
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
observe({
dayBy <- input$day
hourBy <- input$hour
# change dataset according
leafletProxy("map", data = locationTrips) %>%
clearShapes() %>%
addCircles(
~ origin_lon,
~ origin_lat,
radius = ~ freq_r,
layerId = ~ origin_lon,
stroke = FALSE,
color = c('red'),
fillOpacity = ~ freq_a
)
})
# Show a popup at the given location
showTripPopup <- function(lon, lat, lng) {
selectedTrip <- goevb[goevb$origin_lon == lon,]
selectedTrip <- selectedTrip[1,]
content <- as.character(
tagList(
tags$h4("Trip ID:", as.integer(selectedTrip$id)),
sprintf(
"Origin: %s, Latitude: %s Longitude: %s",
selectedTrip$origin, selectedTrip$origin_lat, selectedTrip$origin_lon
)
, tags$br(),
sprintf(
"Destination: %s, Latitude: %s Longitude: %s", selectedTrip$destination, selectedTrip$destination_lat, selectedTrip$destination_lon
), tags$br(),
sprintf("Bus line(s): %s", selectedTrip$line), tags$br(),
sprintf("Datetime: %s", selectedTrip$datetime)
)
)
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = lon)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showTripPopup(event$id, event$lat, event$lng)
})
})
}
# --- UI --- #
header <- dashboardHeader(title = "GÃ¶ttingen Bus Trips")
body <- dashboardBody(fluidRow(column(
width = 9,
box(
width = NULL, solidHeader = TRUE,
leafletOutput("map", height = 500)
)
),
column(
width = 3,
box(
width = NULL, status = "warning",
radioButtons(
"selectedWeekday", "Wochentag",
choices = c(
"Montag" = 1,
"Dienstag" = 2,
"Mittwoch" = 3,
"Donnerstag" = 4,
"Freitag" = 5,
"Samstag" = 6,
"Sonntag" = 0
),
selected = c(1)
),
p(class = "text-muted",
paste("Note: a meaningful note here")),
radioButtons(
"selectedTime", "Uhrzeit",
choices = c(
"8:00 - 12:00" = 0,
"12:00 - 16:00" = 1,
"16:00 - 20:00" = 2,
"20:00 - 24:00" = 3
),
selected = c(0)
),
p(class = "text-muted",
paste("Note: a meaningful note here")),
actionButton("zoomButton", "Zoom to fit buses")
)
)))
ui <- dashboardPage(header,
dashboardSidebar(disable = TRUE),
body)
shinyApp(ui = ui, server = server)
locationTrips$freq_c <- generateColor(locationTrips$freq)
locationTrips$freq_c <- generateColor(locationTrips$freq)
resultRed
# TODO: Auslagern in helper.r
generateColor <- function(tripFreq){
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- 0 + percentFreq * (191 - 0)
resultRed
resultGreen <- 184 + percentFreq * (0 - 184)
resultBlue <- 229 + percentFreq * (0 - 229)
return(1)
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
generateColor <- function(tripFreq){
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- 0 + percentFreq * (191 - 0)
resultGreen <- 184 + percentFreq * (0 - 184)
resultBlue <- 229 + percentFreq * (0 - 229)
return(resultRed, resultGreen, resultBlue)
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
# TODO: Auslagern in helper.r
generateColor <- function(tripFreq){
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- 0 + percentFreq * (191 - 0)
resultGreen <- 184 + percentFreq * (0 - 184)
resultBlue <- 229 + percentFreq * (0 - 229)
return(toString(resultRed) + toString(resultGreen) + toString(resultBlue))
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
# Libraries
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
# TODO: Auslagern in helper.r
generateColor <- function(tripFreq) {
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- 0 + percentFreq * (191 - 0)
resultGreen <- 184 + percentFreq * (0 - 184)
resultBlue <- 229 + percentFreq * (0 - 229)
# return(toString(resultRed) + toString(resultGreen) + toString(resultBlue))
return(paste(resultRed, resultGreen, resultBlue))
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
View(locationTrips)
shiny::runApp()
ries
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
# TODO: Auslagern in helper.r
generateColor <- function(tripFreq) {
maxTrip <- max(tripFreq)
percentFreq <- tripFreq / maxTrip
resultRed <- (0 + percentFreq * (191 - 0)) / 255
resultGreen <- (184 + percentFreq * (0 - 184)) / 255
resultBlue <- (229 + percentFreq * (0 - 229)) / 255
return(rgb(resultRed, resultGreen, resultBlue))
}
# Data
goevb = read.csv("alles.csv", stringsAsFactors = FALSE)
# ## Get trip locations
locationTrips <-
as.data.frame(table(goevb$origin_lon, goevb$origin_lat))
names(locationTrips) <- c('origin_lon', 'origin_lat', 'freq')
locationTrips$origin_lon <-
as.numeric(as.character(locationTrips$origin_lon))
locationTrips$origin_lat <-
as.numeric(as.character(locationTrips$origin_lat))
locationTrips <- subset(locationTrips, freq > 0)
locationTrips$freq_r <-
as.integer((log2(locationTrips$freq) * 10) ^ (1.2))
freq_max <- max(locationTrips$freq_r) * 2
locationTrips$freq_a <- (locationTrips$freq_r / freq_max)
locationTrips$freq_c <- generateColor(locationTrips$freq)
shiny::runApp()
shiny::runApp()
#'
shiny::runApp()
shiny::runApp()
library(shinydashboard)
library(leaflet)
library(dplyr)
function(input, output, session) {
# Create the map
output$map <- renderLeaflet({
map <- leaflet() %>%
addTiles(urlTemplate = "//{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png") %>%
setView(lng = 9.925, lat = 51.54, zoom = 12)
map
})
tripsInBounds <- reactive({
if (is.null(input$map_bounds))
return(locationTrips[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
subset(
locationTrips,
origin_lat >= latRng[1] & origin_lat <= latRng[2] &
origin_lon >= lngRng[1] & origin_lon <= lngRng[2]
)
})
# Precalculate the breaks we'll need for the  histograms
# TODO: Display on the right side of the dashboard
freqBreaks <-
hist(plot = FALSE, locationTrips$freq, breaks = 30)$breaks
output$histFreq <- renderPlot({
if (nrow(tripsInBounds()) == 0)
return(NULL)
hist(
tripsInBounds()$freq,
breaks = freqBreaks,
main = "Trip count (visible trips)",
xlab = "Trip",
xlim = range(locationTrips$freq),
col = '#00DD00',
border = 'white'
)
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
# TODO: change dataset according to variable choice from dropdown list.
observe({
dayBy <- input$day
hourBy <- input$hour
leafletProxy("map", data = locationTrips) %>%
clearShapes() %>%
addCircles(
~ origin_lon,
~ origin_lat,
radius = 175,
layerId = ~ origin_lon,
stroke = FALSE,
color = ~ freq_c,
fillOpacity = ~ freq_a
)
})
# Show a popup at the given location
showTripPopup <- function(lon, lat, lng) {
selectedTrip <- goevb[goevb$origin_lon == lon,]
selectedTrip <- selectedTrip[1,]
content <- as.character(
tagList(
tags$h4("Trip ID:", as.integer(selectedTrip$id)),
sprintf(
"Origin: %s, Latitude: %s Longitude: %s",
selectedTrip$origin, selectedTrip$origin_lat, selectedTrip$origin_lon
)
, tags$br(),
sprintf(
"Destination: %s, Latitude: %s Longitude: %s", selectedTrip$destination, selectedTrip$destination_lat, selectedTrip$destination_lon
), tags$br(),
sprintf("Bus line(s): %s", selectedTrip$line), tags$br(),
sprintf("Datetime: %s", selectedTrip$datetime)
)
)
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = lon)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showTripPopup(event$id, event$lat, event$lng)
})
})
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pwd
pwd()
shiny::runApp()
